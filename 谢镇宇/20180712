
```java
//自己的方法，可以通过600个，共900个实例，存在后300超时现象
class Solution {
    boolean norepeat(String s){
        boolean re=true;
        int len=s.length();
        for(int i=0;i<len;i++)
        {
            for(int j=0;j<len;j++)
                if((s.charAt(i)==s.charAt(j))&&(i!=j))
                    re=false;   
        }
        return re;     
    } 
    public int lengthOfLongestSubstring(String s) {
        if(s.length()==0)
            return 0;    
        int Max=1;
        int len=s.length();
        for(int i=0;i<len;i++)
        {
            for(int j=i+1;j<len;j++)
            {
                String te=s.substring(i,j+1);
                if((norepeat(te))&&((j-i+1)>Max)) 
                    Max=te.length();     
            } 
        }
        return Max;    
    }
}
//网络上的方法
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int []hash=new int[500];
        int max=0;
        int i = 0, j = 0;
        while (i<s.length()&&j<s.length()) {
            if(hash[s.charAt(j)]==0) {
                hash[s.charAt(j)]=1;
                j++;
                max=(j-i)>max?(j-i):max;
            } else {
                hash[s.charAt(i)]=0;
                i++;
            }  
        }
        return max; 
    }
}
```

